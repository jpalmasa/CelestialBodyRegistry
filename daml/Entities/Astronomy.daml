module Entities.Astronomy where

import Entities.Logging
import Entities.Discovery

import DA.Optional
import DA.Text as T
import DA.List ((!!))

template CelestialBody
    with
        issuer: Party
        discovererData: DiscovererData
        cbData: CelestialBodyData
        discoveryData: DiscoveryData
        registryTime: Time
    where
        signatory issuer, discovererData.discovererParty
        key (issuer, discoveryData.id) : (Party, Text)
        maintainer key._1

        ensure
            issuer /= discovererData.discovererParty &&
            idAble cbData /= "" && validateCbId discoveryData &&
            cbData.celestialBodyProperties.celestialCoordinates.ra /= "" &&
            cbData.celestialBodyProperties.celestialCoordinates.dec /= "" &&
            biggerThanZero cbData.celestialBodyProperties.mass &&
            biggerThanZero cbData.celestialBodyProperties.distanceFromEarth && 
            biggerThanZero cbData.celestialBodyProperties.apparentMagnitude

        preconsuming choice IndividualDiscovererUpdatesCelestialBodyProperties: ContractId CelestialBody
            with
                newCBProperties: CelestialBodyProperties
                reason: Text
            controller issuer, discovererData.discovererParty
            do
                debug "Running IndividualDiscovererUpdatesCelestialBodyProperties assertions"
                assertMsg "Reason for an individual discoverer to update celestial body's data must not be an empty text." $ reason /= ""
                assertMsg "Discoverer is not an individual, thus it must execute OrganizationDiscovererUpdatesCelestialBody, instead"
                    $ discovererData.entityType == Individual
                assertMsg "Replicated Data" $ cbData.celestialBodyProperties /= newCBProperties

                recordTime <- getTime

                create ActionRecordLog with
                    executedAction = DataUpdateSucess
                    actor = discovererData.discovererParty
                    optReason = Some reason
                    ..
                trace "Individual discoverer updated it's discovered celestial body." $
                    create this with
                        cbData.celestialBodyProperties = newCBProperties

        preconsuming choice OrganizationDiscovererUpdatesCelestialBodyProperties: (ContractId CelestialBody)
            with
                newCBProperties: CelestialBodyProperties
                reason: Text
            controller discovererData.discovererParty
            do
                debug "Running OrganizationDiscovererUpdatesCelestialBodyProperties assertions"
                assertMsg "Reason for an organization to update it's discovered celestial body data must not be an empty text." $ reason /= ""
                assertMsg "Discoverer is not an organization, thus it must execute IndividualDiscovererUpdatesCelestialBody, instead"
                    $ discovererData.entityType == Organization
                assertMsg "Replicated Data" $ cbData.celestialBodyProperties /= newCBProperties
                
                recordTime <- getTime

                create ActionRecordLog with
                    executedAction = DataUpdateSucess
                    actor = discovererData.discovererParty
                    optReason = Some reason
                    ..

                trace "Organization updated it's discovered celestial body." $
                    create this with
                        cbData.celestialBodyProperties = newCBProperties

data CelestialBodyData = CelestialBodyData with
    name: Text
    catalogId: Optional Text
    celestialBodyProperties: CelestialBodyProperties
    celestialBodyCategory: CelestialBodyCategory
 deriving (Eq, Show)

data CelestialBodyProperties = CelestialBodyProperties with
    celestialCoordinates: CelestialCoordinates
    distanceFromEarth: PhysicalGrandeur
    mass: PhysicalGrandeur
    apparentMagnitude: PhysicalGrandeur
 deriving (Eq, Show)

data CelestialCoordinates = CelestialCoordinates with
    ra:  Text
    dec: Text
 deriving (Eq, Show)

data CelestialBodyCategory = Galaxy | Planet | MinorPlanet | Moon | Nebula | Star | Comet | Asteroid | Cluster | Unknown
 deriving (Eq, Show)

data PhysicalGrandeur = PhysicalGrandeur with
    value: Decimal
    unit: Unit
 deriving (Eq, Show)

data Unit = DistanceUnit | MassUnit | ApparentMagnitudeUnit | UnknownUnit
 deriving (Eq, Show)

data DistanceUnit = Km | LightYear | AU
 deriving (Eq, Show)

data MassUnit = Kg | SolasMass
 deriving (Eq, Show)

data ApparentMagnitudeUnit = WattPerSquareMeter
 deriving (Eq, Show)

class IdAble celestialBodyData id where
    idAble: celestialBodyData -> id

instance IdAble CelestialBodyData Text where
    idAble CelestialBodyData{..} = (T.take 2 (show celestialBodyCategory)) <> ":" <> fromOptional name catalogId -- Id either uses the name or catalogId

class BiggerThanZeroProperty celestialBodyData eval where
    biggerThanZero: celestialBodyData -> eval

instance BiggerThanZeroProperty PhysicalGrandeur Bool where
    biggerThanZero PhysicalGrandeur{value} = value > 0.0

class KnownUnitProperty celestialBodyData eval where
    knownUnit: celestialBodyData -> eval

instance KnownUnitProperty PhysicalGrandeur Bool where
    knownUnit PhysicalGrandeur{unit} = unit /= UnknownUnit

class ValidCbId id b where
    validateCbId: id -> b

instance ValidCbId DiscoveryData Bool where
    validateCbId DiscoveryData{id} = 
        let thirdCharIsColon = ((T.explode id) !! 3) == ":"
            firstTwoCharValid = (T.take 2 id) `elem` possiblePrefixOfCbId
        in
            thirdCharIsColon && firstTwoCharValid

possiblePrefixOfCbId: [Text]
possiblePrefixOfCbId = ["Ga", "Pl", "Mi", "Mo", "Ne", "St", "Co", "As", "Cl", "Un"]
