module Entities.Discovery where

import DA.List (uniqueOn, (!!))
import DA.Text as T 

template Discoverer
    with
        issuer: Party
        discovererData: DiscovererData
        discoveries: [DiscoveryData]
    where
        ensure
            issuer /= discovererData.discovererParty &&
            T.length discovererData.name >= 3 &&
            validateNonEmptyCbIdList discoveries &&
                -- Iterating over the list of registered discorveries to ensure all have valid Ids
            uniqueIdDiscoveriesList discoveries
                -- Duplicate entries not acceptable, expecially entries that share id

        signatory issuer
        observer discovererData.discovererParty

        key (issuer, discovererData.discovererParty): (Party, Party)
        maintainer key._1

data DiscoveryData = DiscoveryData with
    id: Text -- Discovered Celestial Body's id
    date: Date
 deriving (Eq, Show, Ord)

data DiscovererData = DiscovererData with
    discovererParty: Party
    name: Text
    entityType: EntityType
 deriving (Eq, Show)

data EntityType = Individual | Organization -- Individual requires issuer to update data, while an Organization does not
 deriving (Eq, Show)

class ValidCbId id b where
    validateCbId: id -> b

instance ValidCbId DiscoveryData Bool where
    validateCbId DiscoveryData{id} = 
        let idMoreThan3Char = T.length id > 3
            thirdCharIsColon = ((T.explode id) !! 2) == ":"
            firstTwoCharValid = (T.take 2 id) `elem` possiblePrefixOfCbId
        in
            idMoreThan3Char && thirdCharIsColon && firstTwoCharValid

possiblePrefixOfCbId: [Text]
possiblePrefixOfCbId = ["Ga", "Pl", "Ex", "Mi", "Mo", "Ne", "St", "Co", "As", "Cl", "Un"]

uniqueIdDiscoveriesList : (Ord k, HasField "id" r k) => [r] -> Bool
uniqueIdDiscoveriesList discList = uniqueOn (.id) discList

-- Iterating over the list of registered discorveries to ensure all have valid Ids
validateCbIdList listOfDiscoveries = 
    foldr ((&&) . validateCbId) True listOfDiscoveries
        
-- A recursive version on how to check how all entries have valid ids
validateNonEmptyCbIdList : ValidCbId DiscoveryData Bool => [DiscoveryData] -> Bool
validateNonEmptyCbIdList [] = False
validateNonEmptyCbIdList [h] = validateCbId h
validateNonEmptyCbIdList (h::t) = (validateCbId h) && (validateNonEmptyCbIdList t)